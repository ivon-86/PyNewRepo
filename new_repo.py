#!/usr/bin/env python3
import os
import sys
import subprocess
from pathlib import Path
#import shutil
def run_command(command, project_path, shell=True):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏
    command - —Å–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, ["git", "init"])
    shell - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ shell –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (True/False)
    """
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥
        result = subprocess.run(
            command, 
            shell=shell, 
            check=True,           # –í—ã–∑—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            capture_output=True,  # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã
            text=True,            # –í–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–æ –±–∞–π—Ç–æ–≤
            encoding='cp866'      # –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ Windows
        )
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        print(f"‚úì –£—Å–ø–µ—à–Ω–æ: {' '.join(command)}")
        return result.stdout      # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–ø–µ—á–∞—Ç–∞–ª–∞
    except subprocess.CalledProcessError as e:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π
        print(f"‚úó –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ: {' '.join(command)}")
        print(f"–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {e.stderr}")

        # if project_path.exists():
        #     shutil.rmtree(project_path)
        #     #run_command(["rmdir", "/s"], project_path)
        # sys.exit(1)  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏

         # –í—ã—Ö–æ–¥–∏–º –∏–∑ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        original_dir = os.getcwd()
        if os.getcwd() == str(project_path):
            os.chdir("..")  # –í—ã—Ö–æ–¥–∏–º –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
            #print("–í—ã—Ö–æ–¥–∏–º –∏–∑ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ ", os.getcwd())
        # –î–∞–µ–º –≤—Ä–µ–º—è —Å–∏—Å—Ç–µ–º–µ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã
        import time
        time.sleep(1)
        
        # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
        if project_path.exists():
            try:
                # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                for attempt in range(3):
                    try:
                        #shutil.rmtree(project_path)
                        subprocess.run(["rmdir", "/s", "/q", str(project_path)], shell=True, check=False)
                        print(f"‚úì –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: {project_path}")
                        break
                    except PermissionError:
                        if attempt < 2:  # –ï—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                            print(f"‚ö† –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –ü–∞–ø–∫–∞ –∑–∞–Ω—è—Ç–∞, –∂–¥–µ–º...")
                            time.sleep(2)  # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
                        else:
                            print(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É {project_path} –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")
                            print("–£–¥–∞–ª–∏—Ç–µ –ø–∞–ø–∫—É –≤—Ä—É—á–Ω—É—é")
            except Exception as e:
                print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
                print("–£–¥–∞–ª–∏—Ç–µ –ø–∞–ø–∫—É –≤—Ä—É—á–Ω—É—é")
        print("")
        sys.exit(1)

def create_project(github_url, project_name, project_path, creat_venv):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    github_url - —Å—Å—ã–ª–∫–∞ –Ω–∞ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    """
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ URL GitHub
    # –†–∞–∑–±–∏–≤–∞–µ–º URL –ø–æ —Å–ª–µ—à–∞–º, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å, —É–±–∏—Ä–∞–µ–º .git –µ—Å–ª–∏ –µ—Å—Ç—å
    # project_name = github_url.rstrip('/').split('/')[-1].replace('.git', '')
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    print(f"üöÄ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç: {project_name}")
    print("=" * 50)  # –†–∏—Å—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∏–∑ 50 –∑–Ω–∞–∫–æ–≤ =
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–∞–ø–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
    if project_path.exists():
        print(f"‚úó –û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ {project_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        sys.exit(1)  # –í—ã—Ö–æ–¥–∏–º —Å –æ—à–∏–±–∫–æ–π
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
    project_path.mkdir()
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ–∑–¥–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
    os.chdir(project_path)
    print(f"‚úì –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: {project_name}")
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    run_command(["git", "init"], project_path)
    
    # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ .gitignore - —á—Ç–æ Git –¥–æ–ª–∂–µ–Ω –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
    gitignore_content = """# –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ Python
venv/
.venv/

# –ö—ç—à Python
__pycache__/
*.pyc
*.pyo
*.pyd

# –§–∞–π–ª—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
.env
.env.local

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤ –∫–æ–¥–∞
.vscode/
.idea/
*.swp
*.swo

# –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
.DS_Store
Thumbs.db
"""
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª .gitignore
    with open('.gitignore', 'w', encoding='utf-8') as f:
        f.write(gitignore_content)
    print("‚úì –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .gitignore")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ Python
    if creat_venv:
        run_command(["python", "-m", "venv", "venv"], project_path)
        print("‚úì –°–æ–∑–¥–∞–Ω–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ 'venv'")
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞
    Path("src").mkdir()  # –ü–∞–ø–∫–∞ –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
    (Path("src") / "__init__.py").touch()  # –ü—É—Å—Ç–æ–π —Ñ–∞–π–ª, —á—Ç–æ–±—ã Python –≤–∏–¥–µ–ª –ø–∞–ø–∫—É –∫–∞–∫ –ø–∞–∫–µ—Ç
    print("‚úì –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫")
    # –°–æ–∑–¥–∞–µ–º README.md —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞
    readme_content = f"""
–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞{project_name}.

–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.
.....
.....
..
"""
   # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º README.md —Ñ–∞–π–ª
    with open('README.md', 'w', encoding='utf-8') as f:
        f.write(readme_content)
        print("‚úì –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª README.md")

    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π Python —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞
    main_content = """#!/usr/bin/env python3

def main():
    print("Hello, World!")


if __name__ == "__main__":
    main()"""

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º main.py —Ñ–∞–π–ª
    with open('main.py', 'w', encoding='utf-8') as f:
        f.write(main_content)
        print("‚úì –°–æ–∑–¥–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª main.py")

    run_command(["git","add","."], project_path)
   
    run_command(["git","commit","-m", '"–ü–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç"'], project_path)
    
    run_command(["git", "remote", "add", "origin", github_url], project_path)
    run_command(["git", "branch", "-M", "main"], project_path)
    run_command(["git", "push", "-u", "origin", "main"], project_path)
    print("‚úì –£—Å–ø–µ—à–Ω–æ: —Å–≤—è–∑–∞–Ω —Å —É–¥–∞–ª–µ–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º –Ω–∞ GitHube –∏ –∑–∞–ø—É—à–µ–Ω")
    # run_command([r"venv\Scripts\activate"])
    
    print("=" * 50)
    print(r"""
–¢–µ–ø–µ—Ä—å –≤—Å–µ –≤ –≤–∞—à–∏—Ö —Ä—É–∫–∞—Ö!!!
–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ [venv\Scripts\activate] 
–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ [pip install name lib1, lib2, ...]
–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª requirements.txt [pip freeze > requirements.txt]
–î–æ–±–∞–≤—Ç–µ –≤—Å–µ –≤ Git [git add.]
–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ –∫–æ–º–º–∏—Ç–µ—Ç—å –∏ –ø—É—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä GitHub""")
    

def incorect_argv():
    print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python new_repo.py <github_repo_url> <-V>")
    print("–ü—Ä–∏–º–µ—Ä1: python new_repo.py https://github.com/username/repo-name.git")
    print("–ü—Ä–∏–º–µ—Ä2: python new_repo.py https://github.com/username/repo-name.git -V, —Å–æ–∑–¥–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ venv –¥–ª—è python")
    sys.exit(1)

def main():
    # –£–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
    projects_folder = r"C:\Users\User\PyProject"  # r –ø–µ—Ä–µ–¥ —Å—Ç—Ä–æ–∫–æ–π - raw string, –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å esc –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç
    creat_venv = False
    if len(sys.argv) < 2:
       incorect_argv()
    if len(sys.argv) >= 2 and len(sys.argv) <= 3:
        github_url = sys.argv[1]
        if not github_url.startswith('https://github.com/'):
            print("–û—à–∏–±–∫–∞: URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://github.com/")
            sys.exit(1)
        if len(sys.argv) == 3:
            if  sys.argv[2] == "-V":
                creat_venv = True
            else:
                incorect_argv()       
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ URL GitHub
        # –†–∞–∑–±–∏–≤–∞–µ–º URL –ø–æ —Å–ª–µ—à–∞–º, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å, —É–±–∏—Ä–∞–µ–º .git –µ—Å–ª–∏ –µ—Å—Ç—å
        project_name = github_url.rstrip('/').split('/')[-1].replace('.git', '')
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Path –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—É—Ç—è–º–∏
        project_path = Path(projects_folder) / project_name
        create_project(github_url, project_name, project_path, creat_venv)


if __name__ == "__main__":
    main()